{"version":3,"sources":["validation/index.js","components/fields/index.js","components/RegisterForm.js","components/ProductForm.js","App.js","index.js"],"names":["required","value","undefined","minLength","length","maxLength","matchesPassword","allValues","password","asyncValidate","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","values","sleep","wrap","_context","prev","next","ms","Promise","resolve","setTimeout","includes","username","abrupt","reject","stop","_x","apply","this","arguments","getValidityClassName","meta","asyncValidating","active","touched","invalid","valid","customInput","props","label","input","type","react_default","createElement","className","cx","flex-row-reverse","dirty","assign","autoFocus","error","customSelect","discounts","fields","map","code","index","key","Field","name","component","concat","validate","normalize","uppercae","onClick","remove","push","RegisterForm","handleSubmit","onSubmit","capitalize","FieldArray","Component","reduxForm","form","asyncBlurFields","ProductForm","RegisterFormContainer","submit","window","alert","JSON","stringify","preference","newsletter","class","src_components_RegisterForm","initialValues","getInitialValues","components_ProductForm","reducers","formReducer","reducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","App","document","getElementById"],"mappings":"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","file":"static/js/main.0dff8d4d.chunk.js","sourcesContent":["export const required = value =>\r\n    value ? undefined : 'Feild is required'\r\n\r\nexport const minLength = value =>\r\n    value.length < 4 ? 'Values must be at least 4 charactor' : undefined\r\n\r\nexport const maxLength = value =>\r\n    value.length > 10 ? 'Values is too long' : undefined\r\n\r\nexport const matchesPassword = (value, allValues) =>\r\n    value === allValues.password ?\r\n        undefined : \"Password not matched\"\r\n\r\nexport const asyncValidate = async values => {\r\n    const sleep = ms => new Promise(resolve =>setTimeout(resolve, ms));\r\n    await sleep(1000);\r\n    if (['fahran', 'hamdhy'].includes(values.username)) {\r\n        return Promise.reject({\r\n            username: 'Already taken'\r\n        })\r\n    }\r\n}","import React from 'react'\r\nimport cx from 'classnames'\r\nimport { Field } from 'redux-form'\r\nimport { required } from '../../validation';\r\nimport uppercae from 'upper-case'\r\n\r\nconst getValidityClassName = (meta) => {\r\n    if (meta.asyncValidating) {\r\n        return 'async-validating'\r\n    }\r\n    if (meta.active) {\r\n        return;\r\n    }\r\n    if (meta.touched && meta.invalid) {\r\n        return 'invalid';\r\n    }\r\n    if (meta.touched && meta.valid) {\r\n        return 'valid';\r\n    }\r\n}\r\n\r\nexport const customInput = (props) => {\r\n    const { label, input, type, meta } = props\r\n    return (\r\n        <div\r\n            className={cx(\r\n                'custom-input-container',\r\n                { 'flex-row-reverse': type === 'checkbox' },\r\n                { dirty: meta.dirty },\r\n                getValidityClassName(meta)\r\n            )}\r\n        >\r\n            <input {...input} type={type} autoFocus={props.autoFocus}/>\r\n            <label>{label}</label>\r\n            {(meta.error &&\r\n                meta.touched &&\r\n                !meta.active) && (\r\n                    <div className=\"feedback-text error-text\">\r\n                        {meta.error}\r\n                    </div>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const customSelect = (props) => {\r\n    return (\r\n        <div>\r\n            <label>{props.label}</label>\r\n            <select {...props.input}>\r\n                <option value=\"tabs\">Tabs</option>\r\n                <option value=\"spaces\">Spaces</option>\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const discounts = ({ fields }) => (\r\n    <div className=\"custom-field-array-container\">\r\n        {fields.map((code, index) => (\r\n            <div key={index} className=\"field-array-item\">\r\n                <Field\r\n                    name={code}\r\n                    type=\"text\"\r\n                    component={customInput}\r\n                    label={`Discount Code #${index + 1}`}\r\n                    validate={[required]}\r\n                    normalize={uppercae}\r\n                    autoFocus\r\n                />\r\n                <button type=\"button\" onClick={() => \r\n                    fields.remove(index)}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n        ))}\r\n        <button type=\"button\" onClick={()=>fields.push()}>\r\n            Add {!fields.length ? 'Discount Code(s)': 'Another'}\r\n        </button>\r\n    </div>\r\n)","import React, { Component } from 'react'\r\nimport { Field, FieldArray, reduxForm } from 'redux-form'\r\nimport { customInput, customSelect, discounts } from './fields'\r\nimport { required, maxLength, minLength, matchesPassword, asyncValidate } from '../validation'\r\nimport capitalize from 'capitalize'\r\nimport './RegisterForm.css'\r\n\r\nclass RegisterForm extends Component {\r\n    render() {\r\n        const { handleSubmit } = this.props\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <Field\r\n                    name=\"firstname\"\r\n                    component={customInput}\r\n                    type=\"text\"\r\n                    label=\"First Name\"\r\n                    validate={[required]}\r\n                    normalize={capitalize}\r\n                />\r\n                <Field\r\n                    name=\"surname\"\r\n                    component={customInput}\r\n                    type=\"text\"\r\n                    label=\"Surname\"\r\n                    validate={[required]}\r\n                    normalize={capitalize}\r\n                />\r\n                <Field\r\n                    name=\"username\"\r\n                    component={customInput}\r\n                    type=\"text\"\r\n                    label=\"User Name\"\r\n                    validate={[required, maxLength, minLength]}\r\n                />\r\n                <Field\r\n                    name=\"password\"\r\n                    component={customInput}\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    validate={[required]}\r\n                />\r\n                <Field\r\n                    name=\"conformPassword\"\r\n                    component={customInput}\r\n                    type=\"password\"\r\n                    label=\"Confirm Password\"\r\n                    validate={[required, matchesPassword]}\r\n                />\r\n                <Field\r\n                    name=\"preference\"\r\n                    component={customSelect}\r\n                    label=\"Preferred Formatting\"\r\n                />\r\n                <Field\r\n                    name=\"newsletter\"\r\n                    component={customInput}\r\n                    type=\"checkbox\"\r\n                    label=\"Sign up to newsletter\"\r\n                />\r\n                <FieldArray\r\n                    name=\"discountCodes\"\r\n                    component={discounts}\r\n                />\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nRegisterForm = reduxForm({\r\n    form: 'register',\r\n    asyncValidate,\r\n    asyncBlurFields : ['username']\r\n})(RegisterForm)\r\nexport default RegisterForm","import React, { Component } from 'react'\r\n\r\nclass ProductForm extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Product Details</h2>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductForm","import React, { Component } from 'react';\nimport RegisterForm from './components/RegisterForm';\nimport ProductForm from './components/ProductForm';\n\nclass RegisterFormContainer extends Component {\n  submit = values => {\n    window.alert(JSON.stringify(values, null, 4))\n  }\n\n  getInitialValues() {\n    return {\n      preference: \"tabs\",\n      newsletter: true\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"container-fluid\">\n        <div class=\"row\">\n          <div class=\"col-6 col-sm-9 bg-success\"><RegisterForm onSubmit={this.submit}\n            initialValues={this.getInitialValues()} /></div>\n          <div class=\"col-6 col-sm-3 bg-warning\"><ProductForm /></div>\n        </div>\n      </div>\n  \n    )\n  }\n}\n\nexport default RegisterFormContainer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { createStore, combineReducers } from 'redux'\nimport { reducer as formReducer } from 'redux-form'\n\nconst reducers = {\n    form: formReducer\n}\nconst reducer = combineReducers(reducers)\nlet store = createStore(\n    reducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n        window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n\n"],"sourceRoot":""}